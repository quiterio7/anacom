package anacom.presentationserver.server.replication;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.joda.time.DateTime;

import anacom.shared.stubs.client.BalanceLimitExceededException;
import anacom.shared.stubs.client.BonusValueNotValidException;
import anacom.shared.stubs.client.CantChangeStateException;
import anacom.shared.stubs.client.CantMakeVideoCallException;
import anacom.shared.stubs.client.CantMakeVoiceCallException;
import anacom.shared.stubs.client.CantReceiveVideoCallException;
import anacom.shared.stubs.client.CantReceiveVoiceCallException;
import anacom.shared.stubs.client.CommunicationErrorException;
import anacom.shared.stubs.client.DurationNotValidException;
import anacom.shared.stubs.client.FinishCallOnDestinationType;
import anacom.shared.stubs.client.FinishCallType;
import anacom.shared.stubs.client.IncompatiblePrefixException;
import anacom.shared.stubs.client.IncreasePhoneBalanceType;
import anacom.shared.stubs.client.InvalidAmountException;
import anacom.shared.stubs.client.InvalidCallTypeException;
import anacom.shared.stubs.client.InvalidPhoneTypeException;
import anacom.shared.stubs.client.InvalidStateException;
import anacom.shared.stubs.client.InvalidStateFinishMakingCallException;
import anacom.shared.stubs.client.InvalidStateFinishReceivingCallException;
import anacom.shared.stubs.client.InvalidStateMakeVideoException;
import anacom.shared.stubs.client.InvalidStateMakeVoiceException;
import anacom.shared.stubs.client.InvalidStateReceiveVideoException;
import anacom.shared.stubs.client.InvalidStateReceiveVoiceException;
import anacom.shared.stubs.client.InvalidStateSendSMSException;
import anacom.shared.stubs.client.LastMadeCommunicationType;
import anacom.shared.stubs.client.MakeCallType;
import anacom.shared.stubs.client.NoMadeCommunicationException;
import anacom.shared.stubs.client.NotPositiveBalanceException;
import anacom.shared.stubs.client.OperatorDetailedType;
import anacom.shared.stubs.client.OperatorNameAlreadyExistsException;
import anacom.shared.stubs.client.OperatorNameNotValidException;
import anacom.shared.stubs.client.OperatorPrefixAlreadyExistsException;
import anacom.shared.stubs.client.OperatorPrefixNotValidException;
import anacom.shared.stubs.client.OperatorPrefixType;
import anacom.shared.stubs.client.PhoneAlreadyExistsException;
import anacom.shared.stubs.client.PhoneListType;
import anacom.shared.stubs.client.PhoneNotExistsException;
import anacom.shared.stubs.client.PhoneNumberNotValidException;
import anacom.shared.stubs.client.PhoneNumberType;
import anacom.shared.stubs.client.PhoneStateType;
import anacom.shared.stubs.client.PhoneType;
import anacom.shared.stubs.client.ReceiveSMSType;
import anacom.shared.stubs.client.ReceivedSMSListType;
import anacom.shared.stubs.client.ReceivedSMSType;
import anacom.shared.stubs.client.RegisterPhoneType;
import anacom.shared.stubs.client.SMSMessageNotValidException;
import anacom.shared.stubs.client.SendSMSType;
import anacom.shared.stubs.client.UnrecognisedPrefixException;
import anacom.shared.stubs.client.VoidResponseType;

/**
 * This class is used to retrieve the timestamp of a response message from an
 * Operator's server. The responses generated by WSDL don't have a super class
 * with a method that can be used to retrieve the timestamp, so this class is
 * used to abstract all the 'instance of' and casts needed to retrieve that
 * timestamp.
 */
public class TimestampMaster {

	/**
	 * This is the timestamp's null object. This object is initialized with the
	 * lowest possible DateTime value.
	 */
	private static XMLGregorianCalendar nullTimestamp = null;
	
	/**
	 * Initializes the null timestamp object.
	 */
	static {
		DateTime time = new DateTime(0);
		try {
			nullTimestamp =
					DatatypeFactory.newInstance().newXMLGregorianCalendar();
			nullTimestamp.setYear(time.getYear());
			nullTimestamp.setMonth(time.getMonthOfYear());
			nullTimestamp.setDay(time.getDayOfMonth());
			nullTimestamp.setHour(time.getHourOfDay());
			nullTimestamp.setMinute(time.getMinuteOfHour());
			nullTimestamp.setSecond(time.getSecondOfMinute());
			nullTimestamp.setMillisecond(time.getMillisOfSecond());
		} catch (DatatypeConfigurationException e) {
			e.printStackTrace();
		}		
	}
	
	/**
	 * Receives a message and returns its timestamp.
	 * @param obj
	 *		a generic Object containing the message
	 * @return
	 * 		the message's timestamp. If obj isn't a message, the smallest
	 * 		possible timestamp is returned
	 */
	public XMLGregorianCalendar getTimestamp(Object obj) {
		// Web Exceptions
		if (obj instanceof BalanceLimitExceededException) {
			BalanceLimitExceededException resp =
					(BalanceLimitExceededException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
		
		if (obj instanceof BonusValueNotValidException){
			BonusValueNotValidException resp =
					(BonusValueNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
		
		if (obj instanceof CantChangeStateException){
			CantChangeStateException resp =
					(CantChangeStateException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof CantMakeVideoCallException){
			CantMakeVideoCallException resp =
					(CantMakeVideoCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof CantMakeVoiceCallException){
			CantMakeVoiceCallException resp =
					(CantMakeVoiceCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof CantReceiveVideoCallException){
			CantReceiveVideoCallException resp =
					(CantReceiveVideoCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof CantReceiveVoiceCallException){
			CantReceiveVoiceCallException resp =
					(CantReceiveVoiceCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof CommunicationErrorException){
			CommunicationErrorException resp =
					(CommunicationErrorException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof DurationNotValidException){
			DurationNotValidException resp =
					(DurationNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof IncompatiblePrefixException){
			IncompatiblePrefixException resp =
					(IncompatiblePrefixException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidAmountException){
			InvalidAmountException resp =
					(InvalidAmountException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidCallTypeException){
			InvalidCallTypeException resp =
					(InvalidCallTypeException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidPhoneTypeException){
			InvalidPhoneTypeException resp =
					(InvalidPhoneTypeException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateException){
			InvalidStateException resp =
					(InvalidStateException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateFinishMakingCallException){
			InvalidStateFinishMakingCallException resp =
					(InvalidStateFinishMakingCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateFinishReceivingCallException){
			InvalidStateFinishReceivingCallException resp =
					(InvalidStateFinishReceivingCallException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateMakeVideoException){
			InvalidStateMakeVideoException resp =
					(InvalidStateMakeVideoException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateMakeVoiceException){
			InvalidStateMakeVoiceException resp =
					(InvalidStateMakeVoiceException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateReceiveVideoException){
			InvalidStateReceiveVideoException resp =
					(InvalidStateReceiveVideoException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateReceiveVoiceException){
			InvalidStateReceiveVoiceException resp =
					(InvalidStateReceiveVoiceException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof InvalidStateSendSMSException){
			InvalidStateSendSMSException resp =
					(InvalidStateSendSMSException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof NoMadeCommunicationException){
			NoMadeCommunicationException resp =
					(NoMadeCommunicationException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof NotPositiveBalanceException){
			NotPositiveBalanceException resp =
					(NotPositiveBalanceException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof OperatorNameAlreadyExistsException){
			OperatorNameAlreadyExistsException resp =
					(OperatorNameAlreadyExistsException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof OperatorNameNotValidException){
			OperatorNameNotValidException resp =
					(OperatorNameNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof OperatorPrefixAlreadyExistsException){
			OperatorPrefixAlreadyExistsException resp =
					(OperatorPrefixAlreadyExistsException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof OperatorPrefixNotValidException){
			OperatorPrefixNotValidException resp =
					(OperatorPrefixNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof PhoneAlreadyExistsException){
			PhoneAlreadyExistsException resp =
					(PhoneAlreadyExistsException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof PhoneNotExistsException){
			PhoneNotExistsException resp =
					(PhoneNotExistsException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof PhoneNumberNotValidException){
			PhoneNumberNotValidException resp =
					(PhoneNumberNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
			
		if (obj instanceof SMSMessageNotValidException){
			SMSMessageNotValidException resp =
					(SMSMessageNotValidException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
		
		if (obj instanceof UnrecognisedPrefixException){
			UnrecognisedPrefixException resp =
					(UnrecognisedPrefixException)obj;
			return resp.getFaultInfo().getTimestamp();
		}
		
		
		// Web DTOs
		if (obj instanceof FinishCallOnDestinationType) {
			FinishCallOnDestinationType resp =
					(FinishCallOnDestinationType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof FinishCallType){
			FinishCallType resp =
					(FinishCallType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof IncreasePhoneBalanceType){
			IncreasePhoneBalanceType resp =
					(IncreasePhoneBalanceType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof LastMadeCommunicationType){
			LastMadeCommunicationType resp =
					(LastMadeCommunicationType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof MakeCallType){
			MakeCallType resp =
					(MakeCallType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof OperatorDetailedType){
			OperatorDetailedType resp =
					(OperatorDetailedType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof OperatorPrefixType){
			OperatorPrefixType resp =
					(OperatorPrefixType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof PhoneListType){
			PhoneListType resp =
					(PhoneListType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof PhoneNumberType){
			PhoneNumberType resp =
					(PhoneNumberType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof PhoneStateType){
			PhoneStateType resp =
					(PhoneStateType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof PhoneType){
			PhoneType resp =
					(PhoneType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof ReceivedSMSListType){
			ReceivedSMSListType resp =
					(ReceivedSMSListType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof ReceivedSMSType){
			ReceivedSMSType resp =
					(ReceivedSMSType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof ReceiveSMSType){
			ReceiveSMSType resp =
					(ReceiveSMSType) obj;
			return resp.getTimestamp();
		}
	
		if (obj instanceof RegisterPhoneType){
			RegisterPhoneType resp =
					(RegisterPhoneType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof SendSMSType){
			SendSMSType resp =
					(SendSMSType) obj;
			return resp.getTimestamp();
		}
		
		if (obj instanceof VoidResponseType){
			VoidResponseType resp =
					(VoidResponseType) obj;
			return resp.getTimestamp();
		}
		
		return TimestampMaster.nullTimestamp;
	}
	
}
